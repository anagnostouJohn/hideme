// package main

// import (
// 	"bufio"
// 	"bytes"
// 	"encoding/binary"
// 	"fmt"
// 	"io"
// 	"os"
// 	"sort"
// )

// Utmp structure based on /usr/include/utmp.h

// package main

// import (
// 	"fmt"
// 	"os"
// )

// func main() {
// 	// Path to the file
// 	filePath := "/var/run/utmp"

// 	// Open the file
// 	file, err := os.Open(filePath)
// 	if err != nil {
// 		fmt.Println("Error opening file:", err)
// 		return
// 	}
// 	defer file.Close()

// 	// Get the file info to determine its size
// 	fileInfo, err := file.Stat()
// 	if err != nil {
// 		fmt.Println("Error getting file info:", err)
// 		return
// 	}

// 	// Calculate the new size
// 	originalSize := fileInfo.Size()
// 	newSize := originalSize - 384
// 	if newSize < 0 {
// 		fmt.Println("File size is less than 50 bytes. Cannot truncate.")
// 		return
// 	}

// 	// Truncate the file to the new size
// 	err = os.Truncate(filePath, newSize)
// 	if err != nil {
// 		fmt.Println("Error truncating file:", err)
// 		return
// 	}

// 	fmt.Printf("File truncated successfully. Original size: %d bytes, New size: %d bytes\n", originalSize, newSize)
// }
