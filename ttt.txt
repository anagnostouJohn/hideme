type TimeVal struct {
	Sec  int32
}

type Dessision struct {
	onlyIP    []int
	onlyUSer  []int
	IpAndUser []int
}

type DataToInfl struct {
	User   string
	Time   TimeVal
	AddrV6 [16]byte
	Device [LineSize]byte
}

var indexToDel int64
var count int64
var ProxyIp [16]byte

var WTMP string = "/var/log/wtmp"
var play bool = false
var ipBytes []byte

func main() {

	connectedUser := "ubuntu"
	sIP := "192.168.23.23"
	ConvertIPToBytearray(&sIP)
	if play {
		x, _ := parceData(connectedUser)
		fmt.Println(x)
	}
	fmt.Println(ProxyIp)

}

func ConvertIPToBytearray(ip *string) {

	splitIP := strings.Split(*ip, ".")
	for n, s := range splitIP {
		i, err := strconv.Atoi(s)
		if err != nil {
			fmt.Println(err, "asd")
		}

		// To handle both 32-bit and 64-bit architectures, you can use int32 or int64
		var number8 int8 = int8(i) // Convert to int64 for this example

		buffer := new(bytes.Buffer)
		err = binary.Write(buffer, binary.BigEndian, number8)
		if err != nil {
			fmt.Println("binary.Write failed:", err)
		}
		finalByteArray := buffer.Bytes()
		ProxyIp[n] = finalByteArray[0]

	}

}
